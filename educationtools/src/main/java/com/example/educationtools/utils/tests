        //Simple block shames
        memoryModel.declareConditionBlock("1")
        memoryModel.declareWhileDoBlock("2")
        memoryModel.declareVarBlock("3")
        memoryModel.declareVarBlock("4")
        memoryModel.declareDoWhileBlock("5")
        memoryModel.declareConditionBlock("6")
        memoryModel.declareVarBlock("7")
        memoryModel.declareVarBlock("8")
        memoryModel.declareVarBlock("9")
        memoryModel.declareVarBlock("10")
        memoryModel.declareVarBlock("11")
        memoryModel.declareVarBlock("12")
        memoryModel.declareWhileDoBlock("13")
        memoryModel.declareVarBlock("14")
        memoryModel.declareDoWhileBlock("15")
        memoryModel.declareConditionBlock("16")
        memoryModel.declareVarBlock("17")
        memoryModel.declareVarBlock("18")
        memoryModel.declareVarBlock("19")
        memoryModel.declareVarBlock("20")
        memoryModel.declareVarBlock("21")
        memoryModel.declareWhileDoBlock("22")
        memoryModel.declareVarBlock("23")
        memoryModel.declareVarBlock("24")
        memoryModel.declareDoWhileBlock("25")

        memoryModel.bindBlocksOrThrow("1", "2", false)
        memoryModel.bindBlocksOrThrow("2", "3", true)
        memoryModel.bindBlocksOrThrow("4", "5", null)
        memoryModel.bindBlocksOrThrow("5", "4", true)
        memoryModel.bindBlocksOrThrow("3", "4", null)
        memoryModel.bindBlocksOrThrow("5", "2", false)
        memoryModel.bindBlocksOrThrow("1", "11", true)
        memoryModel.bindBlocksOrThrow("11", "12", null)
        memoryModel.bindBlocksOrThrow("12", "13", null)
        memoryModel.bindBlocksOrThrow("13", "14", true)
        memoryModel.bindBlocksOrThrow("14", "13", null)
        memoryModel.bindBlocksOrThrow("13", "15", false)
        memoryModel.bindBlocksOrThrow("15", "16", false)
        memoryModel.bindBlocksOrThrow("16", "17", false)
        memoryModel.bindBlocksOrThrow("15", "12", true)
        memoryModel.bindBlocksOrThrow("17", "18", null)
        memoryModel.bindBlocksOrThrow("18", "19", null)
        memoryModel.bindBlocksOrThrow("16", "20", true)
        memoryModel.bindBlocksOrThrow("21", "22", null)
        memoryModel.bindBlocksOrThrow("22", "23", true)
        memoryModel.bindBlocksOrThrow("23", "22", null)
        memoryModel.bindBlocksOrThrow("22", "24", false)
        memoryModel.bindBlocksOrThrow("24", "25", null)
        //memoryModel.bindBlocksOrThrow("25", "21", true)
        memoryModel.bindBlocksOrThrow("20", "21", null)
        memoryModel.bindBlocksOrThrow("6", "7", false)
        memoryModel.bindBlocksOrThrow("7", "8", null)
        memoryModel.bindBlocksOrThrow("6", "9", true)
        memoryModel.bindBlocksOrThrow("9", "10", null)
        memoryModel.bindBlocksOrThrow("2", "6", false)

        Log.d("Block-Shames", memoryModel.getAvailableBlocksOrThrow("25", true).toString())


        //Do-While test
        memoryModel.declareVarBlock("1")
                memoryModel.declareVarBlock("2")
                memoryModel.declareVarBlock("3")
                memoryModel.declareDoWhileBlock("4")
                memoryModel.declareVarBlock("5")
                memoryModel.declareDoWhileBlock("6")
                memoryModel.declareDoWhileBlock("7")
                memoryModel.declareVarBlock("8")

                Log.d("Block-Shames", memoryModel.getAvailableBlocksOrThrow("1").toString())
                memoryModel.bindBlocksOrThrow("1", "2")

                Log.d("Block-Shames", memoryModel.getAvailableBlocksOrThrow("2").toString())
                memoryModel.bindBlocksOrThrow("2", "3")

                Log.d("Block-Shames", memoryModel.getAvailableBlocksOrThrow("3").toString())
                memoryModel.bindBlocksOrThrow("3", "4")

                Log.d("Block-Shames", memoryModel.getAvailableBlocksOrThrow("4", false).toString())
                memoryModel.bindBlocksOrThrow("4", "5", false)

                Log.d("Block-Shames", memoryModel.getAvailableBlocksOrThrow("5").toString())
                memoryModel.bindBlocksOrThrow("5", "6")

                Log.d("Block-Shames", memoryModel.getAvailableBlocksOrThrow("6", false).toString())
                memoryModel.bindBlocksOrThrow("6", "7", false)

                Log.d("Block-Shames", memoryModel.getAvailableBlocksOrThrow("7", true).toString())
                memoryModel.bindBlocksOrThrow("7", "1", true)

                Log.d("Block-Shames", memoryModel.getAvailableBlocksOrThrow("4", true).toString())
                memoryModel.bindBlocksOrThrow("4", "3", true)

                Log.d("Block-Shames", memoryModel.getAvailableBlocksOrThrow("7", false).toString())
                memoryModel.bindBlocksOrThrow("7", "8", false)

                Log.d("Block-Shames", memoryModel.getAvailableBlocksOrThrow("6", true).toString())
                memoryModel.bindBlocksOrThrow("6", "5", true)

        //Block-Diagram test
                val memoryModel = MemoryModel()

                val startBlock = StartBlock()
                startBlock.setMemoryModel(memoryModel)
                startBlock.updateVariables(listOf(Variable(name = "x", type = Int::class)))

                val varBlock1 = CalculationBlock()
                varBlock1.setMemoryModel(memoryModel)
                var sumFunction = ReflectFunction(MathF.Companion::sumII)
                sumFunction.setVariableOrThrow(VariableFunction(memoryModel, "x"))
                sumFunction.setVariableOrThrow(TypeFunction.generateTypeFunction(10))
                varBlock1.setFunctionAndVar(sumFunction, "y")

                val conditionBlock = ConditionBlock()
                conditionBlock.setMemoryModel(memoryModel)
                var conditionFunction = ConditionFunction(ConditionsF.Companion::moreII)
                conditionFunction.setVariableOrThrow(VariableFunction(memoryModel, "y"))
                conditionFunction.setVariableOrThrow(TypeFunction.generateTypeFunction(20))
                conditionBlock.setFunction(conditionFunction)

                var varBlock2 = CalculationBlock()
                varBlock2.setMemoryModel(memoryModel)
                sumFunction = ReflectFunction(MathF.Companion::sumII)
                sumFunction.setVariableOrThrow(VariableFunction(memoryModel, "y"))
                sumFunction.setVariableOrThrow(TypeFunction.generateTypeFunction(10))
                varBlock2.setFunctionAndVar(sumFunction, "g")

                var varBlock3 = CalculationBlock()
                varBlock3.setMemoryModel(memoryModel)
                sumFunction = ReflectFunction(MathF.Companion::sumII)
                sumFunction.setVariableOrThrow(VariableFunction(memoryModel, "g"))
                sumFunction.setVariableOrThrow(TypeFunction.generateTypeFunction(2))
                varBlock3.setFunctionAndVar(sumFunction, "x")

                var varBlock4 = CalculationBlock()
                varBlock4.setMemoryModel(memoryModel)
                var minFunction = ReflectFunction(MathF.Companion::minusII)
                minFunction.setVariableOrThrow(VariableFunction(memoryModel, "y"))
                minFunction.setVariableOrThrow(TypeFunction.generateTypeFunction(10))
                varBlock4.setFunctionAndVar(minFunction, "z")

                var varBlock5 = CalculationBlock()
                varBlock5.setMemoryModel(memoryModel)
                minFunction = ReflectFunction(MathF.Companion::minusII)
                minFunction.setVariableOrThrow(VariableFunction(memoryModel, "z"))
                minFunction.setVariableOrThrow(TypeFunction.generateTypeFunction(2))
                varBlock5.setFunctionAndVar(minFunction, "x")

                var endBlock = EndBlock()
                endBlock.setMemoryModel(memoryModel)
                endBlock.setVariables(listOf("x"))

                startBlock.setNextBlock(varBlock1)
                varBlock1.setNextBlock(conditionBlock)
                conditionBlock.setFalseBlock(varBlock2)
                varBlock2.setNextBlock(varBlock3)
                conditionBlock.setTrueBlock(varBlock4)
                varBlock4.setNextBlock(varBlock5)
                varBlock5.setNextBlock(endBlock)
                varBlock3.setNextBlock(endBlock)

                endBlock.addOnEndListener { Log.d("Block-Diagram", "$it") }
                startBlock.startOrThrow(listOf(Variable(type = Int::class, value = 12)))